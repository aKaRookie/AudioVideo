apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        applicationId "com.fhl.test"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true
        externalNativeBuild {
            cmake {
                //   cppFlags "-frtti -fexceptions"
                cppFlags ""
            //    cppFlags "-std=c++11 -frtti -fexceptions"
              /*  arguments "-DANDROID_TOOLCHAIN=gcc"

                arguments "-DANDROID_ABI=armeabi-v7a"
                arguments "-DCMAKE_BUILD_TYPE=Release"*/
                arguments "-DANDROID_CPP_FEATURES=rtti exceptions",
                        "-DANDROID_TOOLCHAIN=clang",
                        "-DANDROID_PLATFORM=android-19",
                        "-DANDROID_ABI=armeabi-v7a",
                        "-DANDROID_STL=gnustl_static",
                        "-DANDROID_ARM_MODE=arm",
                        "-DANDROID_ARM_NEON=TRUE"
            }
        }
        ndk{
            moduleName "native-lib"
            abiFilters 'armeabi-v7a'
        }

        sourceSets.main{
            jniLibs.srcDir 'libs' //设置opencv的native库路径，用于加载opencv_java3
            jni.srcDirs = ['src/main/cpp/'] //disable automatic ndk-build call
        }
    }

    buildTypes {
        debug{
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable = true
            jniDebuggable = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable = true
            jniDebuggable = true
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: "$buildDir/native-libs",include: 'native-libs.jar')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.danikula:videocache:2.7.1'

    implementation 'info.guardianproject.netcipher:netcipher:1.2'
    //   implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1"

    implementation 'com.jakewharton:disklrucache:2.0.2'

    api 'com.android.support:multidex:1.0.3'
    api 'com.android.support:multidex-instrumentation:1.0.3'
   // implementation project(path: ':openCV430')
    implementation project(path: ':openCVLibrary330')

}
task nativeLibsToJar(type: Jar,description:'create a jar archive of the native libs'){
    destinationDir file("$buildDir/native-libs")
    baseName 'native-libs'
    from fileTree(dir: 'libs',include: '**/*.so')
    into 'lib/'
}
tasks.withType(JavaCompile){
    compileTask -> compileTask.dependsOn(nativeLibsToJar)
}
